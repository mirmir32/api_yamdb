============================= test session starts =============================
platform win32 -- Python 3.7.9, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- c:\dev\api_yamdb\venv\scripts\python.exe
django: settings: api_yamdb.settings (from ini)
rootdir: C:\dev\api_yamdb, configfile: pytest.ini, testpaths: tests/
plugins: django-4.4.0, pythonpath-0.7.3
collecting ... collected 53 items

tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup PASSED [  1%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup PASSED [  3%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup PASSED [  5%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user PASSED [  7%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data PASSED [  9%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted PASSED [ 11%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted PASSED [ 13%]
tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated PASSED [ 15%]
tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated PASSED [ 16%]
tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated PASSED [ 18%]
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin PASSED    [ 20%]
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search PASSED [ 22%]
tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only PASSED [ 24%]
tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin PASSED [ 26%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_user_superuser PASSED [ 28%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin PASSED [ 30%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin PASSED [ 32%]
tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin PASSED [ 33%]
tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator PASSED [ 35%]
tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user PASSED [ 37%]
tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_user_restricted PASSED [ 39%]
tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin PASSED [ 41%]
tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator PASSED [ 43%]
tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user PASSED [ 45%]
tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser PASSED [ 47%]
tests/test_01_users.py::Test01UserAPI::test_09_users_check_permissions PASSED [ 49%]
tests/test_01_users.py::Test01UserAPI::test_10_users_me_get_admin PASSED [ 50%]
tests/test_01_users.py::Test01UserAPI::test_11_01_users_me_patch_admin PASSED [ 52%]
tests/test_01_users.py::Test01UserAPI::test_11_02_users_me_patch_user PASSED [ 54%]
tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth PASSED [ 56%]
tests/test_02_category.py::Test02CategoryAPI::test_02_category_admin PASSED [ 58%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_delete_admin PASSED [ 60%]
tests/test_02_category.py::Test02CategoryAPI::test_04_category_check_permission_admin PASSED [ 62%]
tests/test_02_category.py::Test02CategoryAPI::test_05_category_create_user PASSED [ 64%]
tests/test_02_category.py::Test02CategoryAPI::test_06_category_create_moderator PASSED [ 66%]
tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth PASSED    [ 67%]
tests/test_03_genre.py::Test03GenreAPI::test_02_genre PASSED             [ 69%]
tests/test_03_genre.py::Test03GenreAPI::test_03_genres_delete PASSED     [ 71%]
tests/test_03_genre.py::Test03GenreAPI::test_04_genres_check_permission PASSED [ 73%]
tests/test_03_genre.py::Test03GenreAPI::test_05_genre_create_user PASSED [ 75%]
tests/test_03_genre.py::Test03GenreAPI::test_06_genre_create_moderator PASSED [ 77%]
tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth PASSED    [ 79%]
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin PASSED       [ 81%]
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail PASSED     [ 83%]
tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission PASSED [ 84%]
tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth PASSED [ 86%]
tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin FAILED    [ 88%]
tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail FAILED   [ 90%]
tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission FAILED [ 92%]
tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth FAILED [ 94%]
tests/test_06_comment.py::Test06CommentAPI::test_02_comment FAILED       [ 96%]
tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail FAILED [ 98%]
tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission FAILED [100%]

================================== FAILURES ===================================
____________________ Test05ReviewAPI.test_02_review_admin _____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x000001A5B6DDD388>
admin_client = <rest_framework.test.APIClient object at 0x000001A5B6E73F08>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_review_admin(self, admin_client, admin):
        titles, _, _ = create_titles(admin_client)
        user, moderator = create_users_api(admin_client)
        client_user = auth_client(user)
        client_moderator = auth_client(moderator)
        data = {}
        response = admin_client.post(f'/api/v1/titles/{titles[0]["id"]}/reviews/', data=data)
        assert response.status_code == 400, (
            'ѕроверьте, что при POST запросе `/api/v1/titles/{title_id}/reviews/` '
            'с не правильными данными возвращает статус 400'
        )
>       self.create_review(admin_client, titles[0]["id"], 'qwerty', 5)

tests\test_05_review.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <tests.test_05_review.Test05ReviewAPI object at 0x000001A5B6DDD388>
client_user = <rest_framework.test.APIClient object at 0x000001A5B6E73F08>
title_id = 10, text = 'qwerty', score = 5

    def create_review(self, client_user, title_id, text, score):
        data = {'text': text, 'score': score}
        response = client_user.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
>       assert response.status_code == 201, (
            'ѕроверьте, что при POST запросе `/api/v1/titles/{title_id}/reviews/` '
            'с правильными данными возвращает статус 201, api доступен дл€ любого аутентифицированного пользовател€'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/titles/{title_id}/reviews/` с правильными данными возвращает статус 201, api доступен дл€ любого аутентифицированного пользовател€
E       assert 400 == 201
E         +400
E         -201

tests\test_05_review.py:24: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/10/reviews/
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/10/reviews/
____________________ Test05ReviewAPI.test_03_review_detail ____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x000001A5B6CA1508>
client = <django.test.client.Client object at 0x000001A5B6CF9C08>
admin_client = <rest_framework.test.APIClient object at 0x000001A5B6CF99C8>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_05_review.py:202: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

uclient = <rest_framework.test.APIClient object at 0x000001A5B6CF99C8>
title_id = 12, text = 'qwerty', score = 5

    def create_review(uclient, title_id, text, score):
        data = {'text': text, 'score': score}
        response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
>       return response.json()['id']
E       KeyError: 'id'

tests\common.py:83: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/12/reviews/
______________ Test05ReviewAPI.test_04_reviews_check_permission _______________

self = <tests.test_05_review.Test05ReviewAPI object at 0x000001A5B68DEA08>
client = <django.test.client.Client object at 0x000001A5B6D928C8>
admin_client = <rest_framework.test.APIClient object at 0x000001A5B6D41FC8>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_reviews_check_permission(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_05_review.py:319: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

uclient = <rest_framework.test.APIClient object at 0x000001A5B6D41FC8>
title_id = 14, text = 'qwerty', score = 5

    def create_review(uclient, title_id, text, score):
        data = {'text': text, 'score': score}
        response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
>       return response.json()['id']
E       KeyError: 'id'

tests\common.py:83: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/14/reviews/
__________________ Test06CommentAPI.test_01_comment_not_auth __________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x000001A5B6CF52C8>
client = <django.test.client.Client object at 0x000001A5B6D7BB48>
admin_client = <rest_framework.test.APIClient object at 0x000001A5B6DB7808>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_01_comment_not_auth(self, client, admin_client, admin):
>       reviews, titles, _, _ = create_reviews(admin_client, admin)

tests\test_06_comment.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

uclient = <rest_framework.test.APIClient object at 0x000001A5B6DB7808>
title_id = 16, text = 'qwerty', score = 5

    def create_review(uclient, title_id, text, score):
        data = {'text': text, 'score': score}
        response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
>       return response.json()['id']
E       KeyError: 'id'

tests\common.py:83: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/16/reviews/
______________________ Test06CommentAPI.test_02_comment _______________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x000001A5B6743BC8>
admin_client = <rest_framework.test.APIClient object at 0x000001A5B6CA8088>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_comment(self, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_06_comment.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

uclient = <rest_framework.test.APIClient object at 0x000001A5B6CA8088>
title_id = 18, text = 'qwerty', score = 5

    def create_review(uclient, title_id, text, score):
        data = {'text': text, 'score': score}
        response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
>       return response.json()['id']
E       KeyError: 'id'

tests\common.py:83: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/18/reviews/
___________________ Test06CommentAPI.test_03_review_detail ____________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x000001A5B6EC1D48>
client = <django.test.client.Client object at 0x000001A5B6EBB0C8>
admin_client = <rest_framework.test.APIClient object at 0x000001A5B6EBBC48>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests\test_06_comment.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

uclient = <rest_framework.test.APIClient object at 0x000001A5B6EBBC48>
title_id = 20, text = 'qwerty', score = 5

    def create_review(uclient, title_id, text, score):
        data = {'text': text, 'score': score}
        response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
>       return response.json()['id']
E       KeyError: 'id'

tests\common.py:83: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/20/reviews/
______________ Test06CommentAPI.test_04_comment_check_permission ______________

self = <tests.test_06_comment.Test06CommentAPI object at 0x000001A5B6EB24C8>
client = <django.test.client.Client object at 0x000001A5B6E7FCC8>
admin_client = <rest_framework.test.APIClient object at 0x000001A5B6E027C8>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_comment_check_permission(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests\test_06_comment.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

uclient = <rest_framework.test.APIClient object at 0x000001A5B6E027C8>
title_id = 22, text = 'qwerty', score = 5

    def create_review(uclient, title_id, text, score):
        data = {'text': text, 'score': score}
        response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
>       return response.json()['id']
E       KeyError: 'id'

tests\common.py:83: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/22/reviews/
-------------------------- Captured stderr teardown ---------------------------
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
=========================== short test summary info ===========================
FAILED tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin - Asser...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail - KeyE...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission
FAILED tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth
FAILED tests/test_06_comment.py::Test06CommentAPI::test_02_comment - KeyError...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail - Ke...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission
======================== 7 failed, 46 passed in 4.38s =========================
============================= test session starts =============================
platform win32 -- Python 3.7.9, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- c:\dev\api_yamdb\venv\scripts\python.exe
django: settings: api_yamdb.settings (from ini)
rootdir: C:\dev\api_yamdb, configfile: pytest.ini, testpaths: tests/
plugins: django-4.4.0, pythonpath-0.7.3
collecting ... collected 53 items

tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup PASSED [  1%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup PASSED [  3%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup PASSED [  5%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user PASSED [  7%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data PASSED [  9%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted PASSED [ 11%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted PASSED [ 13%]
tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated PASSED [ 15%]
tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated PASSED [ 16%]
tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated PASSED [ 18%]
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin PASSED    [ 20%]
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search PASSED [ 22%]
tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only PASSED [ 24%]
tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin PASSED [ 26%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_user_superuser PASSED [ 28%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin PASSED [ 30%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin PASSED [ 32%]
tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin PASSED [ 33%]
tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator PASSED [ 35%]
tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user PASSED [ 37%]
tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_user_restricted PASSED [ 39%]
tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin PASSED [ 41%]
tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator PASSED [ 43%]
tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user PASSED [ 45%]
tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser PASSED [ 47%]
tests/test_01_users.py::Test01UserAPI::test_09_users_check_permissions PASSED [ 49%]
tests/test_01_users.py::Test01UserAPI::test_10_users_me_get_admin PASSED [ 50%]
tests/test_01_users.py::Test01UserAPI::test_11_01_users_me_patch_admin PASSED [ 52%]
tests/test_01_users.py::Test01UserAPI::test_11_02_users_me_patch_user PASSED [ 54%]
tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth PASSED [ 56%]
tests/test_02_category.py::Test02CategoryAPI::test_02_category_admin PASSED [ 58%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_delete_admin PASSED [ 60%]
tests/test_02_category.py::Test02CategoryAPI::test_04_category_check_permission_admin PASSED [ 62%]
tests/test_02_category.py::Test02CategoryAPI::test_05_category_create_user PASSED [ 64%]
tests/test_02_category.py::Test02CategoryAPI::test_06_category_create_moderator PASSED [ 66%]
tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth PASSED    [ 67%]
tests/test_03_genre.py::Test03GenreAPI::test_02_genre PASSED             [ 69%]
tests/test_03_genre.py::Test03GenreAPI::test_03_genres_delete PASSED     [ 71%]
tests/test_03_genre.py::Test03GenreAPI::test_04_genres_check_permission PASSED [ 73%]
tests/test_03_genre.py::Test03GenreAPI::test_05_genre_create_user PASSED [ 75%]
tests/test_03_genre.py::Test03GenreAPI::test_06_genre_create_moderator PASSED [ 77%]
tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth PASSED    [ 79%]
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin PASSED       [ 81%]
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail PASSED     [ 83%]
tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission PASSED [ 84%]
tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth PASSED [ 86%]
tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin FAILED    [ 88%]
tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail FAILED   [ 90%]
tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission FAILED [ 92%]
tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth FAILED [ 94%]
tests/test_06_comment.py::Test06CommentAPI::test_02_comment FAILED       [ 96%]
tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail FAILED [ 98%]
tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission FAILED [100%]

================================== FAILURES ===================================
____________________ Test05ReviewAPI.test_02_review_admin _____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000024052E411C8>
admin_client = <rest_framework.test.APIClient object at 0x0000024052EC6A08>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_review_admin(self, admin_client, admin):
        titles, _, _ = create_titles(admin_client)
        user, moderator = create_users_api(admin_client)
        client_user = auth_client(user)
        client_moderator = auth_client(moderator)
        data = {}
        response = admin_client.post(f'/api/v1/titles/{titles[0]["id"]}/reviews/', data=data)
        assert response.status_code == 400, (
            'ѕроверьте, что при POST запросе `/api/v1/titles/{title_id}/reviews/` '
            'с не правильными данными возвращает статус 400'
        )
>       self.create_review(admin_client, titles[0]["id"], 'qwerty', 5)

tests\test_05_review.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000024052E411C8>
client_user = <rest_framework.test.APIClient object at 0x0000024052EC6A08>
title_id = 10, text = 'qwerty', score = 5

    def create_review(self, client_user, title_id, text, score):
        data = {'text': text, 'score': score}
        response = client_user.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
>       assert response.status_code == 201, (
            'ѕроверьте, что при POST запросе `/api/v1/titles/{title_id}/reviews/` '
            'с правильными данными возвращает статус 201, api доступен дл€ любого аутентифицированного пользовател€'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/titles/{title_id}/reviews/` с правильными данными возвращает статус 201, api доступен дл€ любого аутентифицированного пользовател€
E       assert 400 == 201
E         +400
E         -201

tests\test_05_review.py:24: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/10/reviews/
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/10/reviews/
____________________ Test05ReviewAPI.test_03_review_detail ____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000024052EADC08>
client = <django.test.client.Client object at 0x0000024052F9FB88>
admin_client = <rest_framework.test.APIClient object at 0x0000024052F9FC08>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_05_review.py:202: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

uclient = <rest_framework.test.APIClient object at 0x0000024052F9FC08>
title_id = 12, text = 'qwerty', score = 5

    def create_review(uclient, title_id, text, score):
        data = {'text': text, 'score': score}
        response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
>       return response.json()['id']
E       KeyError: 'id'

tests\common.py:83: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/12/reviews/
______________ Test05ReviewAPI.test_04_reviews_check_permission _______________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000024052E81848>
client = <django.test.client.Client object at 0x0000024052F34FC8>
admin_client = <rest_framework.test.APIClient object at 0x0000024052F34A08>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_reviews_check_permission(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_05_review.py:319: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

uclient = <rest_framework.test.APIClient object at 0x0000024052F34A08>
title_id = 14, text = 'qwerty', score = 5

    def create_review(uclient, title_id, text, score):
        data = {'text': text, 'score': score}
        response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
>       return response.json()['id']
E       KeyError: 'id'

tests\common.py:83: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/14/reviews/
__________________ Test06CommentAPI.test_01_comment_not_auth __________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000024052FB3808>
client = <django.test.client.Client object at 0x00000240530519C8>
admin_client = <rest_framework.test.APIClient object at 0x00000240530513C8>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_01_comment_not_auth(self, client, admin_client, admin):
>       reviews, titles, _, _ = create_reviews(admin_client, admin)

tests\test_06_comment.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

uclient = <rest_framework.test.APIClient object at 0x00000240530513C8>
title_id = 16, text = 'qwerty', score = 5

    def create_review(uclient, title_id, text, score):
        data = {'text': text, 'score': score}
        response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
>       return response.json()['id']
E       KeyError: 'id'

tests\common.py:83: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/16/reviews/
______________________ Test06CommentAPI.test_02_comment _______________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000024052A44948>
admin_client = <rest_framework.test.APIClient object at 0x0000024052E92688>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_comment(self, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_06_comment.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

uclient = <rest_framework.test.APIClient object at 0x0000024052E92688>
title_id = 18, text = 'qwerty', score = 5

    def create_review(uclient, title_id, text, score):
        data = {'text': text, 'score': score}
        response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
>       return response.json()['id']
E       KeyError: 'id'

tests\common.py:83: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/18/reviews/
___________________ Test06CommentAPI.test_03_review_detail ____________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000024052E5FE48>
client = <django.test.client.Client object at 0x0000024052E4E448>
admin_client = <rest_framework.test.APIClient object at 0x0000024052F23348>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests\test_06_comment.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

uclient = <rest_framework.test.APIClient object at 0x0000024052F23348>
title_id = 20, text = 'qwerty', score = 5

    def create_review(uclient, title_id, text, score):
        data = {'text': text, 'score': score}
        response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
>       return response.json()['id']
E       KeyError: 'id'

tests\common.py:83: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/20/reviews/
______________ Test06CommentAPI.test_04_comment_check_permission ______________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000024052E4E888>
client = <django.test.client.Client object at 0x0000024052E266C8>
admin_client = <rest_framework.test.APIClient object at 0x0000024052E26D48>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_comment_check_permission(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests\test_06_comment.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

uclient = <rest_framework.test.APIClient object at 0x0000024052E26D48>
title_id = 22, text = 'qwerty', score = 5

    def create_review(uclient, title_id, text, score):
        data = {'text': text, 'score': score}
        response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
>       return response.json()['id']
E       KeyError: 'id'

tests\common.py:83: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/22/reviews/
-------------------------- Captured stderr teardown ---------------------------
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
=========================== short test summary info ===========================
FAILED tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin - Asser...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail - KeyE...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission
FAILED tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth
FAILED tests/test_06_comment.py::Test06CommentAPI::test_02_comment - KeyError...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail - Ke...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission
======================== 7 failed, 46 passed in 4.26s =========================
============================= test session starts =============================
platform win32 -- Python 3.7.9, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- c:\dev\api_yamdb\venv\scripts\python.exe
django: settings: api_yamdb.settings (from ini)
rootdir: C:\dev\api_yamdb, configfile: pytest.ini, testpaths: tests/
plugins: django-4.4.0, pythonpath-0.7.3
collecting ... collected 53 items

tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup PASSED [  1%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup PASSED [  3%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup PASSED [  5%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user PASSED [  7%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data PASSED [  9%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted PASSED [ 11%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted PASSED [ 13%]
tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated PASSED [ 15%]
tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated PASSED [ 16%]
tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated PASSED [ 18%]
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin PASSED    [ 20%]
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search PASSED [ 22%]
tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only PASSED [ 24%]
tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin PASSED [ 26%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_user_superuser PASSED [ 28%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin PASSED [ 30%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin PASSED [ 32%]
tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin PASSED [ 33%]
tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator PASSED [ 35%]
tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user PASSED [ 37%]
tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_user_restricted PASSED [ 39%]
tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin PASSED [ 41%]
tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator PASSED [ 43%]
tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user PASSED [ 45%]
tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser PASSED [ 47%]
tests/test_01_users.py::Test01UserAPI::test_09_users_check_permissions PASSED [ 49%]
tests/test_01_users.py::Test01UserAPI::test_10_users_me_get_admin PASSED [ 50%]
tests/test_01_users.py::Test01UserAPI::test_11_01_users_me_patch_admin PASSED [ 52%]
tests/test_01_users.py::Test01UserAPI::test_11_02_users_me_patch_user PASSED [ 54%]
tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth PASSED [ 56%]
tests/test_02_category.py::Test02CategoryAPI::test_02_category_admin PASSED [ 58%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_delete_admin PASSED [ 60%]
tests/test_02_category.py::Test02CategoryAPI::test_04_category_check_permission_admin PASSED [ 62%]
tests/test_02_category.py::Test02CategoryAPI::test_05_category_create_user PASSED [ 64%]
tests/test_02_category.py::Test02CategoryAPI::test_06_category_create_moderator PASSED [ 66%]
tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth PASSED    [ 67%]
tests/test_03_genre.py::Test03GenreAPI::test_02_genre PASSED             [ 69%]
tests/test_03_genre.py::Test03GenreAPI::test_03_genres_delete PASSED     [ 71%]
tests/test_03_genre.py::Test03GenreAPI::test_04_genres_check_permission PASSED [ 73%]
tests/test_03_genre.py::Test03GenreAPI::test_05_genre_create_user PASSED [ 75%]
tests/test_03_genre.py::Test03GenreAPI::test_06_genre_create_moderator PASSED [ 77%]
tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth PASSED    [ 79%]
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin PASSED       [ 81%]
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail PASSED     [ 83%]
tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission PASSED [ 84%]
tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth PASSED [ 86%]
tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin FAILED    [ 88%]
tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail FAILED   [ 90%]
tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission FAILED [ 92%]
tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth FAILED [ 94%]
tests/test_06_comment.py::Test06CommentAPI::test_02_comment FAILED       [ 96%]
tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail FAILED [ 98%]
tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission FAILED [100%]

================================== FAILURES ===================================
____________________ Test05ReviewAPI.test_02_review_admin _____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x00000138008986C8>
admin_client = <rest_framework.test.APIClient object at 0x00000138009327C8>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_review_admin(self, admin_client, admin):
        titles, _, _ = create_titles(admin_client)
        user, moderator = create_users_api(admin_client)
        client_user = auth_client(user)
        client_moderator = auth_client(moderator)
        data = {}
        response = admin_client.post(f'/api/v1/titles/{titles[0]["id"]}/reviews/', data=data)
        assert response.status_code == 400, (
            'ѕроверьте, что при POST запросе `/api/v1/titles/{title_id}/reviews/` '
            'с не правильными данными возвращает статус 400'
        )
>       self.create_review(admin_client, titles[0]["id"], 'qwerty', 5)

tests\test_05_review.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\test_05_review.py:23: in create_review
    response = client_user.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\mixins.py:18: in create
    serializer.is_valid(raise_exception=True)
venv\lib\site-packages\rest_framework\serializers.py:220: in is_valid
    self._validated_data = self.run_validation(self.initial_data)
venv\lib\site-packages\rest_framework\serializers.py:419: in run_validation
    value = self.to_internal_value(data)
venv\lib\site-packages\rest_framework\serializers.py:478: in to_internal_value
    validated_value = validate_method(validated_value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = ReviewSerializer(context={'request': <rest_framework.request.Request: POST '/api/v1/titles/10/reviews/'>, 'format': No... IntegerField()
    pub_date = DateTimeField(label='Created date', read_only=True)
    rating = SerializerMethodField()
data = 'qwerty'

    def validate_text(self, data):
        if self.context['request'].method == 'POST':
>           text = data.get('text')
E           AttributeError: 'str' object has no attribute 'get'

api_yamdb\api\serializers.py:108: AttributeError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/10/reviews/
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/10/reviews/
Traceback (most recent call last):
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 220, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 419, in run_validation
    value = self.to_internal_value(data)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 478, in to_internal_value
    validated_value = validate_method(validated_value)
  File "C:\dev\api_yamdb\api_yamdb\api\serializers.py", line 108, in validate_text
    text = data.get('text')
AttributeError: 'str' object has no attribute 'get'
____________________ Test05ReviewAPI.test_03_review_detail ____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x000001380099C048>
client = <django.test.client.Client object at 0x00000138008FC088>
admin_client = <rest_framework.test.APIClient object at 0x00000138008FCD48>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_05_review.py:202: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
tests\common.py:82: in create_review
    response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\mixins.py:18: in create
    serializer.is_valid(raise_exception=True)
venv\lib\site-packages\rest_framework\serializers.py:220: in is_valid
    self._validated_data = self.run_validation(self.initial_data)
venv\lib\site-packages\rest_framework\serializers.py:419: in run_validation
    value = self.to_internal_value(data)
venv\lib\site-packages\rest_framework\serializers.py:478: in to_internal_value
    validated_value = validate_method(validated_value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = ReviewSerializer(context={'request': <rest_framework.request.Request: POST '/api/v1/titles/12/reviews/'>, 'format': No... IntegerField()
    pub_date = DateTimeField(label='Created date', read_only=True)
    rating = SerializerMethodField()
data = 'qwerty'

    def validate_text(self, data):
        if self.context['request'].method == 'POST':
>           text = data.get('text')
E           AttributeError: 'str' object has no attribute 'get'

api_yamdb\api\serializers.py:108: AttributeError
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/12/reviews/
Traceback (most recent call last):
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 220, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 419, in run_validation
    value = self.to_internal_value(data)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 478, in to_internal_value
    validated_value = validate_method(validated_value)
  File "C:\dev\api_yamdb\api_yamdb\api\serializers.py", line 108, in validate_text
    text = data.get('text')
AttributeError: 'str' object has no attribute 'get'
______________ Test05ReviewAPI.test_04_reviews_check_permission _______________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000013800733408>
client = <django.test.client.Client object at 0x000001380095CAC8>
admin_client = <rest_framework.test.APIClient object at 0x000001380095CE08>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_reviews_check_permission(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_05_review.py:319: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
tests\common.py:82: in create_review
    response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\mixins.py:18: in create
    serializer.is_valid(raise_exception=True)
venv\lib\site-packages\rest_framework\serializers.py:220: in is_valid
    self._validated_data = self.run_validation(self.initial_data)
venv\lib\site-packages\rest_framework\serializers.py:419: in run_validation
    value = self.to_internal_value(data)
venv\lib\site-packages\rest_framework\serializers.py:478: in to_internal_value
    validated_value = validate_method(validated_value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = ReviewSerializer(context={'request': <rest_framework.request.Request: POST '/api/v1/titles/14/reviews/'>, 'format': No... IntegerField()
    pub_date = DateTimeField(label='Created date', read_only=True)
    rating = SerializerMethodField()
data = 'qwerty'

    def validate_text(self, data):
        if self.context['request'].method == 'POST':
>           text = data.get('text')
E           AttributeError: 'str' object has no attribute 'get'

api_yamdb\api\serializers.py:108: AttributeError
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/14/reviews/
Traceback (most recent call last):
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 220, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 419, in run_validation
    value = self.to_internal_value(data)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 478, in to_internal_value
    validated_value = validate_method(validated_value)
  File "C:\dev\api_yamdb\api_yamdb\api\serializers.py", line 108, in validate_text
    text = data.get('text')
AttributeError: 'str' object has no attribute 'get'
__________________ Test06CommentAPI.test_01_comment_not_auth __________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000013800CC7308>
client = <django.test.client.Client object at 0x0000013800B67108>
admin_client = <rest_framework.test.APIClient object at 0x0000013800B671C8>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_01_comment_not_auth(self, client, admin_client, admin):
>       reviews, titles, _, _ = create_reviews(admin_client, admin)

tests\test_06_comment.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
tests\common.py:82: in create_review
    response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\mixins.py:18: in create
    serializer.is_valid(raise_exception=True)
venv\lib\site-packages\rest_framework\serializers.py:220: in is_valid
    self._validated_data = self.run_validation(self.initial_data)
venv\lib\site-packages\rest_framework\serializers.py:419: in run_validation
    value = self.to_internal_value(data)
venv\lib\site-packages\rest_framework\serializers.py:478: in to_internal_value
    validated_value = validate_method(validated_value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = ReviewSerializer(context={'request': <rest_framework.request.Request: POST '/api/v1/titles/16/reviews/'>, 'format': No... IntegerField()
    pub_date = DateTimeField(label='Created date', read_only=True)
    rating = SerializerMethodField()
data = 'qwerty'

    def validate_text(self, data):
        if self.context['request'].method == 'POST':
>           text = data.get('text')
E           AttributeError: 'str' object has no attribute 'get'

api_yamdb\api\serializers.py:108: AttributeError
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/16/reviews/
Traceback (most recent call last):
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 220, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 419, in run_validation
    value = self.to_internal_value(data)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 478, in to_internal_value
    validated_value = validate_method(validated_value)
  File "C:\dev\api_yamdb\api_yamdb\api\serializers.py", line 108, in validate_text
    text = data.get('text')
AttributeError: 'str' object has no attribute 'get'
______________________ Test06CommentAPI.test_02_comment _______________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000013800AB4948>
admin_client = <rest_framework.test.APIClient object at 0x0000013800BB3748>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_comment(self, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_06_comment.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
tests\common.py:82: in create_review
    response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\mixins.py:18: in create
    serializer.is_valid(raise_exception=True)
venv\lib\site-packages\rest_framework\serializers.py:220: in is_valid
    self._validated_data = self.run_validation(self.initial_data)
venv\lib\site-packages\rest_framework\serializers.py:419: in run_validation
    value = self.to_internal_value(data)
venv\lib\site-packages\rest_framework\serializers.py:478: in to_internal_value
    validated_value = validate_method(validated_value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = ReviewSerializer(context={'request': <rest_framework.request.Request: POST '/api/v1/titles/18/reviews/'>, 'format': No... IntegerField()
    pub_date = DateTimeField(label='Created date', read_only=True)
    rating = SerializerMethodField()
data = 'qwerty'

    def validate_text(self, data):
        if self.context['request'].method == 'POST':
>           text = data.get('text')
E           AttributeError: 'str' object has no attribute 'get'

api_yamdb\api\serializers.py:108: AttributeError
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/18/reviews/
Traceback (most recent call last):
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 220, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 419, in run_validation
    value = self.to_internal_value(data)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 478, in to_internal_value
    validated_value = validate_method(validated_value)
  File "C:\dev\api_yamdb\api_yamdb\api\serializers.py", line 108, in validate_text
    text = data.get('text')
AttributeError: 'str' object has no attribute 'get'
___________________ Test06CommentAPI.test_03_review_detail ____________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000013800BB3AC8>
client = <django.test.client.Client object at 0x0000013800A9E6C8>
admin_client = <rest_framework.test.APIClient object at 0x0000013800A9E708>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests\test_06_comment.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
tests\common.py:82: in create_review
    response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\mixins.py:18: in create
    serializer.is_valid(raise_exception=True)
venv\lib\site-packages\rest_framework\serializers.py:220: in is_valid
    self._validated_data = self.run_validation(self.initial_data)
venv\lib\site-packages\rest_framework\serializers.py:419: in run_validation
    value = self.to_internal_value(data)
venv\lib\site-packages\rest_framework\serializers.py:478: in to_internal_value
    validated_value = validate_method(validated_value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = ReviewSerializer(context={'request': <rest_framework.request.Request: POST '/api/v1/titles/20/reviews/'>, 'format': No... IntegerField()
    pub_date = DateTimeField(label='Created date', read_only=True)
    rating = SerializerMethodField()
data = 'qwerty'

    def validate_text(self, data):
        if self.context['request'].method == 'POST':
>           text = data.get('text')
E           AttributeError: 'str' object has no attribute 'get'

api_yamdb\api\serializers.py:108: AttributeError
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/20/reviews/
Traceback (most recent call last):
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 220, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 419, in run_validation
    value = self.to_internal_value(data)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 478, in to_internal_value
    validated_value = validate_method(validated_value)
  File "C:\dev\api_yamdb\api_yamdb\api\serializers.py", line 108, in validate_text
    text = data.get('text')
AttributeError: 'str' object has no attribute 'get'
______________ Test06CommentAPI.test_04_comment_check_permission ______________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000013800CDD408>
client = <django.test.client.Client object at 0x00000138007B6108>
admin_client = <rest_framework.test.APIClient object at 0x0000013800798208>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_comment_check_permission(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests\test_06_comment.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
tests\common.py:82: in create_review
    response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\mixins.py:18: in create
    serializer.is_valid(raise_exception=True)
venv\lib\site-packages\rest_framework\serializers.py:220: in is_valid
    self._validated_data = self.run_validation(self.initial_data)
venv\lib\site-packages\rest_framework\serializers.py:419: in run_validation
    value = self.to_internal_value(data)
venv\lib\site-packages\rest_framework\serializers.py:478: in to_internal_value
    validated_value = validate_method(validated_value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = ReviewSerializer(context={'request': <rest_framework.request.Request: POST '/api/v1/titles/22/reviews/'>, 'format': No... IntegerField()
    pub_date = DateTimeField(label='Created date', read_only=True)
    rating = SerializerMethodField()
data = 'qwerty'

    def validate_text(self, data):
        if self.context['request'].method == 'POST':
>           text = data.get('text')
E           AttributeError: 'str' object has no attribute 'get'

api_yamdb\api\serializers.py:108: AttributeError
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/22/reviews/
Traceback (most recent call last):
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 220, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 419, in run_validation
    value = self.to_internal_value(data)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 478, in to_internal_value
    validated_value = validate_method(validated_value)
  File "C:\dev\api_yamdb\api_yamdb\api\serializers.py", line 108, in validate_text
    text = data.get('text')
AttributeError: 'str' object has no attribute 'get'
-------------------------- Captured stderr teardown ---------------------------
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
=========================== short test summary info ===========================
FAILED tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin - Attri...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail - Attr...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission
FAILED tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth
FAILED tests/test_06_comment.py::Test06CommentAPI::test_02_comment - Attribut...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail - At...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission
======================== 7 failed, 46 passed in 4.90s =========================
============================= test session starts =============================
platform win32 -- Python 3.7.9, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- c:\dev\api_yamdb\venv\scripts\python.exe
django: settings: api_yamdb.settings (from ini)
rootdir: C:\dev\api_yamdb, configfile: pytest.ini, testpaths: tests/
plugins: django-4.4.0, pythonpath-0.7.3
collecting ... collected 53 items

tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup PASSED [  1%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup PASSED [  3%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup PASSED [  5%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user PASSED [  7%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data PASSED [  9%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted PASSED [ 11%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted PASSED [ 13%]
tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated PASSED [ 15%]
tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated PASSED [ 16%]
tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated PASSED [ 18%]
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin PASSED    [ 20%]
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search PASSED [ 22%]
tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only PASSED [ 24%]
tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin PASSED [ 26%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_user_superuser PASSED [ 28%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin PASSED [ 30%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin PASSED [ 32%]
tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin PASSED [ 33%]
tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator PASSED [ 35%]
tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user PASSED [ 37%]
tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_user_restricted PASSED [ 39%]
tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin PASSED [ 41%]
tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator PASSED [ 43%]
tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user PASSED [ 45%]
tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser PASSED [ 47%]
tests/test_01_users.py::Test01UserAPI::test_09_users_check_permissions PASSED [ 49%]
tests/test_01_users.py::Test01UserAPI::test_10_users_me_get_admin PASSED [ 50%]
tests/test_01_users.py::Test01UserAPI::test_11_01_users_me_patch_admin PASSED [ 52%]
tests/test_01_users.py::Test01UserAPI::test_11_02_users_me_patch_user PASSED [ 54%]
tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth PASSED [ 56%]
tests/test_02_category.py::Test02CategoryAPI::test_02_category_admin PASSED [ 58%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_delete_admin PASSED [ 60%]
tests/test_02_category.py::Test02CategoryAPI::test_04_category_check_permission_admin PASSED [ 62%]
tests/test_02_category.py::Test02CategoryAPI::test_05_category_create_user PASSED [ 64%]
tests/test_02_category.py::Test02CategoryAPI::test_06_category_create_moderator PASSED [ 66%]
tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth PASSED    [ 67%]
tests/test_03_genre.py::Test03GenreAPI::test_02_genre PASSED             [ 69%]
tests/test_03_genre.py::Test03GenreAPI::test_03_genres_delete PASSED     [ 71%]
tests/test_03_genre.py::Test03GenreAPI::test_04_genres_check_permission PASSED [ 73%]
tests/test_03_genre.py::Test03GenreAPI::test_05_genre_create_user PASSED [ 75%]
tests/test_03_genre.py::Test03GenreAPI::test_06_genre_create_moderator PASSED [ 77%]
tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth PASSED    [ 79%]
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin PASSED       [ 81%]
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail PASSED     [ 83%]
tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission PASSED [ 84%]
tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth PASSED [ 86%]
tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin FAILED    [ 88%]
tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail FAILED   [ 90%]
tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission FAILED [ 92%]
tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth FAILED [ 94%]
tests/test_06_comment.py::Test06CommentAPI::test_02_comment FAILED       [ 96%]
tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail FAILED [ 98%]
tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission FAILED [100%]

================================== FAILURES ===================================
____________________ Test05ReviewAPI.test_02_review_admin _____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000022BDE565AC8>
admin_client = <rest_framework.test.APIClient object at 0x0000022BDE56FC08>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_review_admin(self, admin_client, admin):
        titles, _, _ = create_titles(admin_client)
        user, moderator = create_users_api(admin_client)
        client_user = auth_client(user)
        client_moderator = auth_client(moderator)
        data = {}
        response = admin_client.post(f'/api/v1/titles/{titles[0]["id"]}/reviews/', data=data)
        assert response.status_code == 400, (
            'ѕроверьте, что при POST запросе `/api/v1/titles/{title_id}/reviews/` '
            'с не правильными данными возвращает статус 400'
        )
>       self.create_review(admin_client, titles[0]["id"], 'qwerty', 5)

tests\test_05_review.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000022BDE565AC8>
client_user = <rest_framework.test.APIClient object at 0x0000022BDE56FC08>
title_id = 10, text = 'qwerty', score = 5

    def create_review(self, client_user, title_id, text, score):
        data = {'text': text, 'score': score}
        response = client_user.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
>       assert response.status_code == 201, (
            'ѕроверьте, что при POST запросе `/api/v1/titles/{title_id}/reviews/` '
            'с правильными данными возвращает статус 201, api доступен дл€ любого аутентифицированного пользовател€'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/titles/{title_id}/reviews/` с правильными данными возвращает статус 201, api доступен дл€ любого аутентифицированного пользовател€
E       assert 400 == 201
E         +400
E         -201

tests\test_05_review.py:24: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/10/reviews/
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/10/reviews/
____________________ Test05ReviewAPI.test_03_review_detail ____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000022BDE3F6188>
client = <django.test.client.Client object at 0x0000022BDE424508>
admin_client = <rest_framework.test.APIClient object at 0x0000022BDE40C488>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_05_review.py:202: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

uclient = <rest_framework.test.APIClient object at 0x0000022BDE40C488>
title_id = 12, text = 'qwerty', score = 5

    def create_review(uclient, title_id, text, score):
        data = {'text': text, 'score': score}
        response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
>       return response.json()['id']
E       KeyError: 'id'

tests\common.py:83: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/12/reviews/
______________ Test05ReviewAPI.test_04_reviews_check_permission _______________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000022BDE42AD08>
client = <django.test.client.Client object at 0x0000022BDE474548>
admin_client = <rest_framework.test.APIClient object at 0x0000022BDE53CFC8>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_reviews_check_permission(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_05_review.py:319: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

uclient = <rest_framework.test.APIClient object at 0x0000022BDE53CFC8>
title_id = 14, text = 'qwerty', score = 5

    def create_review(uclient, title_id, text, score):
        data = {'text': text, 'score': score}
        response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
>       return response.json()['id']
E       KeyError: 'id'

tests\common.py:83: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/14/reviews/
__________________ Test06CommentAPI.test_01_comment_not_auth __________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000022BDE49C088>
client = <django.test.client.Client object at 0x0000022BDE4EBF88>
admin_client = <rest_framework.test.APIClient object at 0x0000022BDE4247C8>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_01_comment_not_auth(self, client, admin_client, admin):
>       reviews, titles, _, _ = create_reviews(admin_client, admin)

tests\test_06_comment.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

uclient = <rest_framework.test.APIClient object at 0x0000022BDE4247C8>
title_id = 16, text = 'qwerty', score = 5

    def create_review(uclient, title_id, text, score):
        data = {'text': text, 'score': score}
        response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
>       return response.json()['id']
E       KeyError: 'id'

tests\common.py:83: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/16/reviews/
______________________ Test06CommentAPI.test_02_comment _______________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000022BDD8972C8>
admin_client = <rest_framework.test.APIClient object at 0x0000022BDE60CA08>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_comment(self, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_06_comment.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

uclient = <rest_framework.test.APIClient object at 0x0000022BDE60CA08>
title_id = 18, text = 'qwerty', score = 5

    def create_review(uclient, title_id, text, score):
        data = {'text': text, 'score': score}
        response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
>       return response.json()['id']
E       KeyError: 'id'

tests\common.py:83: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/18/reviews/
___________________ Test06CommentAPI.test_03_review_detail ____________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000022BDDFD9448>
client = <django.test.client.Client object at 0x0000022BDE5C08C8>
admin_client = <rest_framework.test.APIClient object at 0x0000022BDE5C0808>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests\test_06_comment.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

uclient = <rest_framework.test.APIClient object at 0x0000022BDE5C0808>
title_id = 20, text = 'qwerty', score = 5

    def create_review(uclient, title_id, text, score):
        data = {'text': text, 'score': score}
        response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
>       return response.json()['id']
E       KeyError: 'id'

tests\common.py:83: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/20/reviews/
______________ Test06CommentAPI.test_04_comment_check_permission ______________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000022BDDFBF688>
client = <django.test.client.Client object at 0x0000022BDE5D3408>
admin_client = <rest_framework.test.APIClient object at 0x0000022BDE514808>
admin = <CustomUser: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_comment_check_permission(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests\test_06_comment.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests\common.py:90: in create_reviews
    result.append({'id': create_review(admin_client, titles[0]["id"], 'qwerty', 5),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

uclient = <rest_framework.test.APIClient object at 0x0000022BDE514808>
title_id = 22, text = 'qwerty', score = 5

    def create_review(uclient, title_id, text, score):
        data = {'text': text, 'score': score}
        response = uclient.post(f'/api/v1/titles/{title_id}/reviews/', data=data)
>       return response.json()['id']
E       KeyError: 'id'

tests\common.py:83: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/22/reviews/
-------------------------- Captured stderr teardown ---------------------------
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
=========================== short test summary info ===========================
FAILED tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin - Asser...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail - KeyE...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission
FAILED tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth
FAILED tests/test_06_comment.py::Test06CommentAPI::test_02_comment - KeyError...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail - Ke...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission
======================== 7 failed, 46 passed in 4.31s =========================
